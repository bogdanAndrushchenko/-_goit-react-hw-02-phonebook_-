{"version":3,"sources":["Components/FormPhone/FormPhone.module.css","Components/PhoneList/PhoneList.module.css","Components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-test-items.js","redux/contacts/contacts-reducer.js","redux/store.js","Components/FormPhone/FormPhone.jsx","Components/PhoneList/PhoneList.jsx","Components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortId","generate","deleteContact","onChangeFilter","testContact","itemsReducer","createReducer","action","state","filter","filterReducer","_","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","connect","dispatch","onFormSubmit","contactActions","useState","setName","setNumber","handleInputChange","e","currentTarget","value","console","log","validatorInput","onName","find","contact","toast","success","position","handleCheckUniqueContact","error","autoClose","resetForm","onSubmit","preventDefault","className","s","Form","Form_label","type","placeholder","onChange","Button","contactID","actions","phoneList","normalizedFilter","toLowerCase","includes","getFilterContact","PhoneList","length","map","PhoneList_item","onClick","onSearch","target","Filter_label","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,WAAa,8BAA8B,OAAS,4B,mBCArGD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,eAAiB,kCAAkC,OAAS,4B,mBCAvHD,EAAOC,QAAU,CAAC,aAAe,+B,6OCelB,GACXC,WAdeC,YAAa,eAAe,SAACC,EAAMC,GAClD,MAAO,CACHC,QAAS,CACLC,GAAIC,IAAQC,WACZL,OACAC,cAURK,cALkBP,YAAa,kBAM/BQ,eALmBR,YAAa,mBCNrBS,EARK,CAChB,CAACL,GAAI,OAAQH,KAAM,gBAAiBC,OAAQ,aAC5C,CAACE,GAAI,OAAQH,KAAM,iBAAkBC,OAAQ,aAC7C,CAACE,GAAI,OAAQH,KAAM,gBAAiBC,OAAQ,aAC5C,CAACE,GAAI,OAAQH,KAAM,iBAAkBC,OAAQ,aAC7C,CAACE,GAAI,OAAQH,KAAM,mBAAoBC,OAAQ,cCA7CQ,EAAeC,YAAc,YAAIF,IAAL,mBAC7BG,EAAOb,YAAa,SAACc,EAAD,OAASV,EAAT,EAASA,QAAT,4BAA0BU,GAA1B,CAAiCV,OADxB,cAE7BS,EAAOL,eAAgB,SAACM,EAAD,OAASV,EAAT,EAASA,QAAT,OACpBU,EAAMC,QAAO,qBAAEV,KAAeD,QAHJ,IAM5BY,EAAgBJ,YAAc,GAAD,eAC9BC,EAAOJ,gBAAiB,SAACQ,EAAD,YAAKb,YAGnBc,cAAgB,CAC3BC,MAAOR,EACPI,OAAQC,ICENI,EAAU,sBAAOC,YAAqB,CACxCC,kBAAmB,CACfC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAFlD,CAIZC,MAEEC,EAAgB,CAClBC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGVC,EAAQC,YAAe,CACzBC,QAAS,CACLC,SAAUC,YAAeR,EAAeS,IAE5CpB,aACAqB,UAAUC,IAKC,GAACC,UAFEC,YAAaT,GAEJA,S,gCC4DZU,eATS,SAAA/B,GAAK,MAAK,CAC9BwB,SAAUxB,EAAMwB,SAASnB,UAGF,SAAA2B,GAAQ,MAAK,CACpCC,aAAc,SAAC7C,EAAMC,GAAP,OACV2C,EAASE,EAAehD,WAAWE,EAAMC,QAGlC0C,EA7FG,SAAC,GAA8B,IAA7BP,EAA4B,EAA5BA,SAAUS,EAAkB,EAAlBA,aAAkB,EACpBE,mBAAS,IADW,mBACrC/C,EADqC,KAC/BgD,EAD+B,OAEhBD,mBAAS,IAFO,mBAErC9C,EAFqC,KAE7BgD,EAF6B,KAItCC,EAAoB,SAAAC,GAAM,IAAD,EACLA,EAAEC,cAAjBpD,EADoB,EACpBA,KAAMqD,EADc,EACdA,MACb,OAAQrD,GACJ,IAAK,OACDgD,EAAQK,GACR,MACJ,IAAK,SACDJ,EAAUI,GACV,MACJ,QACIC,QAAQC,IAAIvD,KAqBlBwD,EAAiB,WACnB,OAAKxD,GAASC,EAPe,SAAAD,GAC7B,IAAMyD,IAAWrB,EAASsB,MAAK,SAAAC,GAAO,OAAIA,EAAQ3D,OAASA,KAE3D,OADA4D,IAAMC,QAAN,UAAiB7D,EAAjB,2BAAgD,CAAC8D,SAAU,cACnDL,EAWDM,CAAyB/D,IAN5B4D,IAAMI,MAAM,gDAAiD,CACzDC,UAAW,IACXH,SAAU,gBAEP,IAKTI,EAAY,WACdlB,EAAQ,IACRC,EAAU,KAGd,OACI,uBAAMkB,SAlCe,SAAAhB,GACrBA,EAAEiB,iBACkBZ,MAKpBX,EAAa7C,EAAMC,GACnBiE,MA0BkCG,UAAWC,IAAEC,KAA/C,UACI,wBAAOF,UAAWC,IAAEE,WAApB,UACI,uCACA,uBACIxE,KAAK,OACLyE,KAAK,OACLpB,MAAOrD,EACP0E,YAAY,kBACZC,SAAUzB,OAGlB,wBAAOmB,UAAWC,IAAEE,WAApB,UACI,yCACA,uBACIxE,KAAK,SACLyE,KAAK,SACLpB,MAAOpD,EACPyE,YAAY,oBACZC,SAAUzB,OAGlB,wBAAQuB,KAAK,SAASJ,UAAWC,IAAEM,OAAnC,+B,iBC7BGjC,eATS,SAAA/B,GAAK,MAAK,CAC9BwB,SAAUxB,EAAMwB,SAASnB,MACzBJ,OAAQD,EAAMwB,SAASvB,WAGA,SAAA+B,GAAQ,MAAK,CACpCtC,cAAe,SAAAuE,GAAS,OAAIjC,EAASkC,EAAQxE,cAAcuE,QAGhDlC,EA9CG,SAAC,GAAuC,IAAtCP,EAAqC,EAArCA,SAAUvB,EAA2B,EAA3BA,OAAQP,EAAmB,EAAnBA,cAS5ByE,EARmB,WACrB,IAAMC,EAAmBnE,EAAOoE,cAEhC,OAAO7C,EAASvB,QAAO,SAAA8C,GAAO,OAC1BA,EAAQ3D,KAAKiF,cAAcC,SAASF,MAI1BG,GAElB,OACI,qBAAId,UAAWC,IAAEc,UAAjB,UACI,kDAAqBL,EAAUM,UAC9BN,EAAUO,KAAI,gBAAEnF,EAAF,EAAEA,GAAIH,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,OAAZ,OACX,qBAAaoE,UAAWC,IAAEiB,eAA1B,UACKvF,EADL,MACa,+BAAOC,IAChB,wBACIwE,KAAK,SACLJ,UAAWC,IAAEM,OACbY,QAAS,WACLlF,EAAcH,IAJtB,sBAFKA,Y,iBCUVwC,eARS,SAAA/B,GAAK,MAAK,CAC9ByC,MAAOzC,EAAMwB,SAASvB,WAGC,SAAA+B,GAAQ,MAAK,CACpC6C,SAAU,SAAAtC,GAAC,OAAIP,EAASE,EAAevC,eAAe4C,EAAEuC,OAAOrC,YAGpDV,EAzBA,SAAC,GAAD,IAAEU,EAAF,EAAEA,MAAOoC,EAAT,EAASA,SAAT,OACX,wBAAOpB,UAAWC,IAAEqB,aAApB,kCAEI,uBACIlB,KAAK,SACLpB,MAAOA,EACPsB,SAAUc,EACVf,YAAY,sBCSTkB,G,YAdH,WAER,OACI,sBAAKvB,UAAU,YAAf,UACI,oBAAIA,UAAU,kBAAd,uBACA,cAAC,EAAD,IACA,oBAAIA,UAAU,kBAAd,sBACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,IAAD,SCPZwB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAU9D,MAAOA,EAAMA,MAAvB,SACI,cAAC,IAAD,CAAa+D,QAAS,KAAMvD,UAAWR,EAAMQ,UAA7C,SACI,cAAC,EAAD,UAIZwD,SAASC,eAAe,W","file":"static/js/main.581ec9fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"FormPhone_Form__3nLCH\",\"Form_label\":\"FormPhone_Form_label__lAg1a\",\"Button\":\"FormPhone_Button__2hQpp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PhoneList\":\"PhoneList_PhoneList__3Xk2M\",\"PhoneList_item\":\"PhoneList_PhoneList_item__23MGQ\",\"Button\":\"PhoneList_Button__4AlOe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter_label\":\"Filter_Filter_label__2cvYX\"};","import {createAction} from '@reduxjs/toolkit';\nimport shortId from 'shortid';\n\nconst addContact = createAction('contact/add', (name, number) => {\n    return {\n        payload: {\n            id: shortId.generate(),\n            name,\n            number,\n        },\n    };\n});\n\nconst deleteContact = createAction('contact/delete');\nconst onChangeFilter = createAction('contact/filter');\n\nexport default {\n    addContact,\n    deleteContact,\n    onChangeFilter,\n};\n\n// const addContact = (name, number) => ({\n//   type: ADD_CONTACT,\n//   payload: {\n//     id: shortId.generate(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = contactID => ({\n//   type: DELETE_CONTACT,\n//   payload: contactID,\n// });\n\n// const onChangeFilter = value => ({\n//   type: FILTER_CHANGE,\n//   payload: value,\n// });\n","const testContact = [\n    {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    {id: 'id-5', name: 'Bogdan Andrush..', number: '899-24-76'},\n];\n\nexport default testContact;\n","import {createReducer, combineReducers} from '@reduxjs/toolkit';\n\nimport action from './contacts-actions';\nimport testContact from './contacts-test-items';\n\nconst itemsReducer = createReducer([...testContact], {\n    [action.addContact]: (state, {payload}) => [...state, payload],\n    [action.deleteContact]: (state, {payload}) =>\n        state.filter(({id}) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n    [action.onChangeFilter]: (_, {payload}) => payload,\n});\n\nexport default combineReducers({\n    items: itemsReducer,\n    filter: filterReducer,\n});\n// import actionTypes from './contact-types-actions';\n// const {ADD_CONTACT, DELETE_CONTACT, FILTER_CHANGE} = actionTypes;\n// const itemsReducer = (state = [...testContact], { type, payload }) => {\n//   switch (type) {\n//     case ADD_CONTACT:\n//       return [...state, payload];\n//     case DELETE_CONTACT:\n//       return state.filter(({ id }) => id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', {type, payload}) => {\n//     switch (type) {\n//         case FILTER_CHANGE:\n//             return payload;\n//         default:\n//             return state;\n//     }\n// };\n","import {\n    configureStore,\n    getDefaultMiddleware\n} from '@reduxjs/toolkit';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER\n} from 'redux-persist';\n\nimport logger from 'redux-logger';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n}), logger];\n\nconst persistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter']\n};\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(persistConfig, contactsReducer)\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store)\n\nexport default {persistor, store};\n\n","import {useState} from 'react';\nimport {connect} from 'react-redux';\nimport {toast} from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nimport contactActions from '../../redux/contacts/contacts-actions';\nimport s from './FormPhone.module.css';\n\nconst FormPhone = ({contacts, onFormSubmit}) => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleInputChange = e => {\n        const {name, value} = e.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                console.log(name);\n        }\n    };\n\n    const handleSubmitForm = e => {\n        e.preventDefault();\n        const formIsValid = validatorInput();\n        if (!formIsValid) {\n            return;\n        }\n\n        onFormSubmit(name, number);\n        resetForm();\n    };\n\n    const handleCheckUniqueContact = name => {\n        const onName = !!contacts.find(contact => contact.name === name);\n        toast.success(`${name} is already in contacts`, {position: 'top-left'});\n        return !onName;\n    };\n\n    const validatorInput = () => {\n        if (!name || !number) {\n            toast.error('Field \"name\" or \"number\" is entry. Try again!', {\n                autoClose: 4000,\n                position: 'top-center',\n            });\n            return false;\n        }\n        return handleCheckUniqueContact(name);\n    };\n\n    const resetForm = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmitForm} className={s.Form}>\n            <label className={s.Form_label}>\n                <p>Name :</p>\n                <input\n                    name=\"name\"\n                    type=\"text\"\n                    value={name}\n                    placeholder=\"Enter your name\"\n                    onChange={handleInputChange}\n                />\n            </label>\n            <label className={s.Form_label}>\n                <p>Number :</p>\n                <input\n                    name=\"number\"\n                    type=\"number\"\n                    value={number}\n                    placeholder=\"Enter your number\"\n                    onChange={handleInputChange}\n                />\n            </label>\n            <button type=\"submit\" className={s.Button}>\n                Add contact\n            </button>\n        </form>\n    );\n};\n\nFormPhone.propTypes = {\n    onFormSubmit: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\nconst mapStateToProps = state => ({\n    contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onFormSubmit: (name, number) =>\n        dispatch(contactActions.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormPhone);\n","import PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport s from './PhoneList.module.css';\nimport actions from '../../redux/contacts/contacts-actions';\n\nconst PhoneList = ({contacts, filter, deleteContact}) => {\n    const getFilterContact = () => {\n        const normalizedFilter = filter.toLowerCase();\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter),\n        );\n    };\n\n    const phoneList = getFilterContact();\n\n    return (\n        <ul className={s.PhoneList}>\n            <p>Total contacts : {phoneList.length}</p>\n            {phoneList.map(({id, name, number}) => (\n                <li key={id} className={s.PhoneList_item}>\n                    {name} : <span>{number}</span>\n                    <button\n                        type=\"button\"\n                        className={s.Button}\n                        onClick={() => {\n                            deleteContact(id);\n                        }}\n                    >\n                        Delete\n                    </button>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nPhoneList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n    deleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts.items,\n    filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    deleteContact: contactID => dispatch(actions.deleteContact(contactID)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneList);\n","import PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport contactActions from '../../redux/contacts/contacts-actions';\nimport s from './Filter.module.css';\n\nconst Filter = ({value, onSearch}) => (\n    <label className={s.Filter_label}>\n        Find contact by name:\n        <input\n            type=\"search\"\n            value={value}\n            onChange={onSearch}\n            placeholder=\"search name\"\n        />\n    </label>\n);\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onSearch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSearch: e => dispatch(contactActions.onChangeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import FormPhone from './Components/FormPhone';\nimport PhoneList from './Components/PhoneList';\nimport Filter from './Components/Filter';\nimport {ToastContainer} from 'react-toastify';\n\nimport './App.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n\n    return (\n        <div className=\"Phonebook\">\n            <h2 className=\"Phonebook_title\">Phonebook</h2>\n            <FormPhone/>\n            <h3 className=\"Phonebook_title\">Contacts</h3>\n            <Filter/>\n            <PhoneList/>\n            <ToastContainer/>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {PersistGate} from 'redux-persist/integration/react';\n\nimport './index.css';\n\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store.store}>\n            <PersistGate loading={null} persistor={store.persistor}>\n                <App/>\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}